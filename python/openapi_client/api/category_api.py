# coding: utf-8

"""
    Keepa API

    The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@keepa.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class CategoryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def category(self, key, domain, category, parents, **kwargs):  # noqa: E501
        """Returns Amazon category information from Keepa API.  # noqa: E501

        Retrieve category objects using their node ids and (optional) their parent tree.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category(key, domain, category, parents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Your private API key. (required)
        :param int domain: Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au) (required)
        :param int category: The category node id of the category you want to request. For batch requests a comma separated list of ids (up to 10, the token cost stays the same). Alternatively you can specify the value 0, which will retrieve a list of all root categories. (required)
        :param int parents: Whether or not to include the category tree for each category. (1 = include, 0 = do not include.) (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_with_http_info(key, domain, category, parents, **kwargs)  # noqa: E501
        else:
            (data) = self.category_with_http_info(key, domain, category, parents, **kwargs)  # noqa: E501
            return data

    def category_with_http_info(self, key, domain, category, parents, **kwargs):  # noqa: E501
        """Returns Amazon category information from Keepa API.  # noqa: E501

        Retrieve category objects using their node ids and (optional) their parent tree.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_with_http_info(key, domain, category, parents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Your private API key. (required)
        :param int domain: Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au) (required)
        :param int category: The category node id of the category you want to request. For batch requests a comma separated list of ids (up to 10, the token cost stays the same). Alternatively you can specify the value 0, which will retrieve a list of all root categories. (required)
        :param int parents: Whether or not to include the category tree for each category. (1 = include, 0 = do not include.) (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['key', 'domain', 'category', 'parents']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in local_var_params or
                local_var_params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `category`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in local_var_params or
                local_var_params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `category`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in local_var_params or
                local_var_params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `category`")  # noqa: E501
        # verify the required parameter 'parents' is set
        if ('parents' not in local_var_params or
                local_var_params['parents'] is None):
            raise ValueError("Missing the required parameter `parents` when calling `category`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'domain' in local_var_params:
            query_params.append(('domain', local_var_params['domain']))  # noqa: E501
        if 'category' in local_var_params:
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'parents' in local_var_params:
            query_params.append(('parents', local_var_params['parents']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/category', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Category]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
