# coding: utf-8

"""
    Keepa API

    The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@keepa.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Category(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain_id': 'int',
        'cat_id': 'int',
        'name': 'str',
        'children': 'list[int]',
        'parent': 'int',
        'highest_rank': 'int',
        'product_count': 'int'
    }

    attribute_map = {
        'domain_id': 'domainId',
        'cat_id': 'catId',
        'name': 'name',
        'children': 'children',
        'parent': 'parent',
        'highest_rank': 'highestRank',
        'product_count': 'productCount'
    }

    def __init__(self, domain_id=Domain_idEnum._1, cat_id=281052, name='Digital Cameras', children=[3109924011,7242008011,3017941,2476680011,330405011,2476681011,3109925011], parent=502394, highest_rank=6549, product_count=1522):  # noqa: E501
        """Category - a model defined in OpenAPI"""  # noqa: E501

        self._domain_id = None
        self._cat_id = None
        self._name = None
        self._children = None
        self._parent = None
        self._highest_rank = None
        self._product_count = None
        self.discriminator = None

        self.domain_id = domain_id
        self.cat_id = cat_id
        self.name = name
        self.children = children
        self.parent = parent
        self.highest_rank = highest_rank
        self.product_count = product_count

    @property
    def domain_id(self):
        """Gets the domain_id of this Category.  # noqa: E501

        Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)  # noqa: E501

        :return: The domain_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this Category.

        Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)  # noqa: E501

        :param domain_id: The domain_id of this Category.  # noqa: E501
        :type: int
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")  # noqa: E501
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]  # noqa: E501
        if domain_id not in allowed_values:
            raise ValueError(
                "Invalid value for `domain_id` ({0}), must be one of {1}"  # noqa: E501
                .format(domain_id, allowed_values)
            )

        self._domain_id = domain_id

    @property
    def cat_id(self):
        """Gets the cat_id of this Category.  # noqa: E501

        The category node id used by Amazon. Represents the identifier of the category. Also part of the Product object’s categories and rootCategory fields. Always a positive Long value. Note - The id 9223372036854775807 (max signed long value) denotes a blank category with the name “?”. We use this in cases where a product is listed in no or non-existent categories.  # noqa: E501

        :return: The cat_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._cat_id

    @cat_id.setter
    def cat_id(self, cat_id):
        """Sets the cat_id of this Category.

        The category node id used by Amazon. Represents the identifier of the category. Also part of the Product object’s categories and rootCategory fields. Always a positive Long value. Note - The id 9223372036854775807 (max signed long value) denotes a blank category with the name “?”. We use this in cases where a product is listed in no or non-existent categories.  # noqa: E501

        :param cat_id: The cat_id of this Category.  # noqa: E501
        :type: int
        """
        if cat_id is None:
            raise ValueError("Invalid value for `cat_id`, must not be `None`")  # noqa: E501

        self._cat_id = cat_id

    @property
    def name(self):
        """Gets the name of this Category.  # noqa: E501

        The name of the category.  # noqa: E501

        :return: The name of this Category.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.

        The name of the category.  # noqa: E501

        :param name: The name of this Category.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def children(self):
        """Gets the children of this Category.  # noqa: E501

        List of all sub categories. null or [] (empty array) if the category has no sub categories.  # noqa: E501

        :return: The children of this Category.  # noqa: E501
        :rtype: list[int]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Category.

        List of all sub categories. null or [] (empty array) if the category has no sub categories.  # noqa: E501

        :param children: The children of this Category.  # noqa: E501
        :type: list[int]
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")  # noqa: E501

        self._children = children

    @property
    def parent(self):
        """Gets the parent of this Category.  # noqa: E501

        The parent category’s Id. Always a positive Long value. If it is 0 the category is a root category and has no parent category.  # noqa: E501

        :return: The parent of this Category.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Category.

        The parent category’s Id. Always a positive Long value. If it is 0 the category is a root category and has no parent category.  # noqa: E501

        :param parent: The parent of this Category.  # noqa: E501
        :type: int
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")  # noqa: E501

        self._parent = parent

    @property
    def highest_rank(self):
        """Gets the highest_rank of this Category.  # noqa: E501

        The highest (root category) sales rank we have observed of a product that is listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.  # noqa: E501

        :return: The highest_rank of this Category.  # noqa: E501
        :rtype: int
        """
        return self._highest_rank

    @highest_rank.setter
    def highest_rank(self, highest_rank):
        """Sets the highest_rank of this Category.

        The highest (root category) sales rank we have observed of a product that is listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.  # noqa: E501

        :param highest_rank: The highest_rank of this Category.  # noqa: E501
        :type: int
        """
        if highest_rank is None:
            raise ValueError("Invalid value for `highest_rank`, must not be `None`")  # noqa: E501

        self._highest_rank = highest_rank

    @property
    def product_count(self):
        """Gets the product_count of this Category.  # noqa: E501

        Number of products that are listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.  # noqa: E501

        :return: The product_count of this Category.  # noqa: E501
        :rtype: int
        """
        return self._product_count

    @product_count.setter
    def product_count(self, product_count):
        """Sets the product_count of this Category.

        Number of products that are listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.  # noqa: E501

        :param product_count: The product_count of this Category.  # noqa: E501
        :type: int
        """
        if product_count is None:
            raise ValueError("Invalid value for `product_count`, must not be `None`")  # noqa: E501

        self._product_count = product_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
