/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.CategoryApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.CategoryApi');

goog.require('API.Client.category');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.CategoryApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('CategoryApiBasePath') ?
                   /** @type {!string} */ ($injector.get('CategoryApiBasePath')) :
                   'https://virtserver.swaggerhub.com/magicCashew/keepa/1.0.0';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('CategoryApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('CategoryApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.CategoryApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Returns Amazon category information from Keepa API.
 * Retrieve category objects using their node ids and (optional) their parent tree.
 * @param {!string} key Your private API key.
 * @param {!number} domain Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)
 * @param {!number} category The category node id of the category you want to request. For batch requests a comma separated list of ids (up to 10, the token cost stays the same). Alternatively you can specify the value 0, which will retrieve a list of all root categories.
 * @param {!number} parents Whether or not to include the category tree for each category. (1 &#x3D; include, 0 &#x3D; do not include.)
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.category>>}
 */
API.Client.CategoryApi.prototype.category = function(key, domain, category, parents, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/category';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'key' is set
  if (!key) {
    throw new Error('Missing required parameter key when calling category');
  }
  // verify required parameter 'domain' is set
  if (!domain) {
    throw new Error('Missing required parameter domain when calling category');
  }
  // verify required parameter 'category' is set
  if (!category) {
    throw new Error('Missing required parameter category when calling category');
  }
  // verify required parameter 'parents' is set
  if (!parents) {
    throw new Error('Missing required parameter parents when calling category');
  }
  if (key !== undefined) {
    queryParameters['key'] = key;
  }

  if (domain !== undefined) {
    queryParameters['domain'] = domain;
  }

  if (category !== undefined) {
    queryParameters['category'] = category;
  }

  if (parents !== undefined) {
    queryParameters['parents'] = parents;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
