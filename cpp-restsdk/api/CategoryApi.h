/**
 * Keepa API
 * The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@keepa.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CategoryApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CategoryApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CategoryApi_H_


#include "../ApiClient.h"

#include "Category.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CategoryApi 
{
public:

    explicit CategoryApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~CategoryApi();

    /// <summary>
    /// Returns Amazon category information from Keepa API.
    /// </summary>
    /// <remarks>
    /// Retrieve category objects using their node ids and (optional) their parent tree.
    /// </remarks>
    /// <param name="key">Your private API key.</param>
    /// <param name="domain">Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)</param>
    /// <param name="category">The category node id of the category you want to request. For batch requests a comma separated list of ids (up to 10, the token cost stays the same). Alternatively you can specify the value 0, which will retrieve a list of all root categories.</param>
    /// <param name="parents">Whether or not to include the category tree for each category. (1 &#x3D; include, 0 &#x3D; do not include.)</param>
    pplx::task<std::vector<std::shared_ptr<Category>>> category(
        utility::string_t key,
        int32_t domain,
        int32_t category,
        int32_t parents
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CategoryApi_H_ */

