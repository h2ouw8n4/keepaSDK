/*
 * Keepa API
 *
 * The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@keepa.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Category : IEquatable<Category>
    { 
        /// <summary>
        /// Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)
        /// </summary>
        /// <value>Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)</value>
        
        public enum DomainIdEnum
        {
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            
            _1Enum = 1,
            
            /// <summary>
            /// Enum _2Enum for 2
            /// </summary>
            
            _2Enum = 2,
            
            /// <summary>
            /// Enum _3Enum for 3
            /// </summary>
            
            _3Enum = 3,
            
            /// <summary>
            /// Enum _4Enum for 4
            /// </summary>
            
            _4Enum = 4,
            
            /// <summary>
            /// Enum _5Enum for 5
            /// </summary>
            
            _5Enum = 5,
            
            /// <summary>
            /// Enum _6Enum for 6
            /// </summary>
            
            _6Enum = 6,
            
            /// <summary>
            /// Enum _7Enum for 7
            /// </summary>
            
            _7Enum = 7,
            
            /// <summary>
            /// Enum _8Enum for 8
            /// </summary>
            
            _8Enum = 8,
            
            /// <summary>
            /// Enum _9Enum for 9
            /// </summary>
            
            _9Enum = 9,
            
            /// <summary>
            /// Enum _10Enum for 10
            /// </summary>
            
            _10Enum = 10,
            
            /// <summary>
            /// Enum _11Enum for 11
            /// </summary>
            
            _11Enum = 11,
            
            /// <summary>
            /// Enum _12Enum for 12
            /// </summary>
            
            _12Enum = 12,
            
            /// <summary>
            /// Enum _13Enum for 13
            /// </summary>
            
            _13Enum = 13
        }

        /// <summary>
        /// Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)
        /// </summary>
        /// <value>Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)</value>
        [Required]
        [DataMember(Name="domainId")]
        public DomainIdEnum? DomainId { get; set; }

        /// <summary>
        /// The category node id used by Amazon. Represents the identifier of the category. Also part of the Product object’s categories and rootCategory fields. Always a positive Long value. Note - The id 9223372036854775807 (max signed long value) denotes a blank category with the name “?”. We use this in cases where a product is listed in no or non-existent categories.
        /// </summary>
        /// <value>The category node id used by Amazon. Represents the identifier of the category. Also part of the Product object’s categories and rootCategory fields. Always a positive Long value. Note - The id 9223372036854775807 (max signed long value) denotes a blank category with the name “?”. We use this in cases where a product is listed in no or non-existent categories.</value>
        [Required]
        [DataMember(Name="catId")]
        public int? CatId { get; set; }

        /// <summary>
        /// The name of the category.
        /// </summary>
        /// <value>The name of the category.</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// List of all sub categories. null or [] (empty array) if the category has no sub categories.
        /// </summary>
        /// <value>List of all sub categories. null or [] (empty array) if the category has no sub categories.</value>
        [Required]
        [DataMember(Name="children")]
        public List<int?> Children { get; set; }

        /// <summary>
        /// The parent category’s Id. Always a positive Long value. If it is 0 the category is a root category and has no parent category.
        /// </summary>
        /// <value>The parent category’s Id. Always a positive Long value. If it is 0 the category is a root category and has no parent category.</value>
        [Required]
        [DataMember(Name="parent")]
        public int? Parent { get; set; }

        /// <summary>
        /// The highest (root category) sales rank we have observed of a product that is listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.
        /// </summary>
        /// <value>The highest (root category) sales rank we have observed of a product that is listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.</value>
        [Required]
        [DataMember(Name="highestRank")]
        public int? HighestRank { get; set; }

        /// <summary>
        /// Number of products that are listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.
        /// </summary>
        /// <value>Number of products that are listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.</value>
        [Required]
        [DataMember(Name="productCount")]
        public int? ProductCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  CatId: ").Append(CatId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  HighestRank: ").Append(HighestRank).Append("\n");
            sb.Append("  ProductCount: ").Append(ProductCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Category)obj);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="other">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DomainId == other.DomainId ||
                    DomainId != null &&
                    DomainId.Equals(other.DomainId)
                ) && 
                (
                    CatId == other.CatId ||
                    CatId != null &&
                    CatId.Equals(other.CatId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Children == other.Children ||
                    Children != null &&
                    Children.SequenceEqual(other.Children)
                ) && 
                (
                    Parent == other.Parent ||
                    Parent != null &&
                    Parent.Equals(other.Parent)
                ) && 
                (
                    HighestRank == other.HighestRank ||
                    HighestRank != null &&
                    HighestRank.Equals(other.HighestRank)
                ) && 
                (
                    ProductCount == other.ProductCount ||
                    ProductCount != null &&
                    ProductCount.Equals(other.ProductCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DomainId != null)
                    hashCode = hashCode * 59 + DomainId.GetHashCode();
                    if (CatId != null)
                    hashCode = hashCode * 59 + CatId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Children != null)
                    hashCode = hashCode * 59 + Children.GetHashCode();
                    if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                    if (HighestRank != null)
                    hashCode = hashCode * 59 + HighestRank.GetHashCode();
                    if (ProductCount != null)
                    hashCode = hashCode * 59 + ProductCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Category left, Category right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Category left, Category right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
