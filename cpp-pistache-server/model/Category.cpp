/**
* Keepa API
* The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
*
* OpenAPI spec version: 1.0.0
* Contact: info@keepa.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Category.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Category::Category()
{
    m_DomainId = 0;
    m_CatId = 0;
    m_Name = "";
    m_Parent = 0;
    m_HighestRank = 0;
    m_ProductCount = 0;
    
}

Category::~Category()
{
}

void Category::validate()
{
    // TODO: implement validation
}

nlohmann::json Category::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["domainId"] = m_DomainId;
    val["catId"] = m_CatId;
    val["name"] = ModelBase::toJson(m_Name);
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Children )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["children"] = jsonArray;
        
    }
    val["parent"] = m_Parent;
    val["highestRank"] = m_HighestRank;
    val["productCount"] = m_ProductCount;
    

    return val;
}

void Category::fromJson(const nlohmann::json& val)
{
    setDomainId(val.at("domainId"));
    setCatId(val.at("catId"));
    setName(val.at("name"));
    {
        m_Children.clear();
                    for( const auto& item : val["children"] )
            {
                m_Children.push_back(item);
                
            }
    }
    setParent(val.at("parent"));
    setHighestRank(val.at("highestRank"));
    setProductCount(val.at("productCount"));
    
}


int32_t Category::getDomainId() const
{
    return m_DomainId;
}
void Category::setDomainId(int32_t const value)
{
    m_DomainId = value;
    
}
int32_t Category::getCatId() const
{
    return m_CatId;
}
void Category::setCatId(int32_t const value)
{
    m_CatId = value;
    
}
std::string Category::getName() const
{
    return m_Name;
}
void Category::setName(std::string const& value)
{
    m_Name = value;
    
}
std::vector<int32_t>& Category::getChildren()
{
    return m_Children;
}
int32_t Category::getParent() const
{
    return m_Parent;
}
void Category::setParent(int32_t const value)
{
    m_Parent = value;
    
}
int32_t Category::getHighestRank() const
{
    return m_HighestRank;
}
void Category::setHighestRank(int32_t const value)
{
    m_HighestRank = value;
    
}
int32_t Category::getProductCount() const
{
    return m_ProductCount;
}
void Category::setProductCount(int32_t const value)
{
    m_ProductCount = value;
    
}

}
}
}
}

