/**
* Keepa API
* The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
*
* OpenAPI spec version: 1.0.0
* Contact: info@keepa.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ProductApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

ProductApi::ProductApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void ProductApi::init() {
    setupRoutes();
}

void ProductApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/product", Routes::bind(&ProductApi::product_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ProductApi::product_api_default_handler, this));
}

void ProductApi::product_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto keyQuery = request.query().get("key");
    Pistache::Optional<std::string> key;
    if(!keyQuery.isEmpty()){
        std::string value;
        if(fromStringValue(keyQuery.get(), value)){
            key = Pistache::Some(value);
        }
    }
    auto domainQuery = request.query().get("domain");
    Pistache::Optional<int32_t> domain;
    if(!domainQuery.isEmpty()){
        int32_t value;
        if(fromStringValue(domainQuery.get(), value)){
            domain = Pistache::Some(value);
        }
    }
    auto asinQuery = request.query().get("asin");
    Pistache::Optional<std::string> asin;
    if(!asinQuery.isEmpty()){
        std::string value;
        if(fromStringValue(asinQuery.get(), value)){
            asin = Pistache::Some(value);
        }
    }
    auto codeQuery = request.query().get("code");
    Pistache::Optional<std::string> code;
    if(!codeQuery.isEmpty()){
        std::string value;
        if(fromStringValue(codeQuery.get(), value)){
            code = Pistache::Some(value);
        }
    }
    
    try {
      this->product(key, domain, asin, code, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void ProductApi::product_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

