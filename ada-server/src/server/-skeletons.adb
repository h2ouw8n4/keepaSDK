--  Keepa API
--  The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep_Alive connection.  Multiple requests can be made in parallel to increase throughput.
--
--  OpenAPI spec version: 1.0.0
--  Contact: info@keepa.com
--
--  NOTE: This package is auto generated by the swagger code generator 4.0.0-beta2.
--  https://openapi-generator.tech
--  Do not edit the class manually.
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is

   package body Skeleton is


      package API_Category is
         new Swagger.Servers.Operation (Handler => Category,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/category");

      --  Returns Amazon category information from Keepa API.
      procedure Category
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Key : Swagger.UString;
         Domain : Integer;
         Category : Integer;
         Parents : Integer;
         Result : .Models.CategoryType_Vectors.Vector;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "key", Key);
         Swagger.Servers.Get_Query_Parameter (Req, "domain", Domain);
         Swagger.Servers.Get_Query_Parameter (Req, "category", Category);
         Swagger.Servers.Get_Query_Parameter (Req, "parents", Parents);
         Impl.Category
            (Key,
             Domain,
             Category,
             Parents, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Category;

      package API_Product is
         new Swagger.Servers.Operation (Handler => Product,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/product");

      --  Retrieve the product for the specified ASIN and domain.
      procedure Product
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Key : Swagger.UString;
         Domain : Integer;
         Asin : Swagger.Nullable_UString;
         Code : Swagger.Nullable_UString;
         Result : .Models.CategoryType_Vectors.Vector;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "key", Key);
         Swagger.Servers.Get_Query_Parameter (Req, "domain", Domain);
         Swagger.Servers.Get_Query_Parameter (Req, "asin", Asin);
         Swagger.Servers.Get_Query_Parameter (Req, "code", Code);
         Impl.Product
            (Key,
             Domain,
             Asin,
             Code, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Product;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Category.Definition);
         Swagger.Servers.Register (Server, API_Product.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Returns Amazon category information from Keepa API.
      procedure Category
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Key : Swagger.UString;
         Domain : Integer;
         Category : Integer;
         Parents : Integer;
         Result : .Models.CategoryType_Vectors.Vector;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "key", Key);
         Swagger.Servers.Get_Query_Parameter (Req, "domain", Domain);
         Swagger.Servers.Get_Query_Parameter (Req, "category", Category);
         Swagger.Servers.Get_Query_Parameter (Req, "parents", Parents);
         Server.Category
            (Key,
             Domain,
             Category,
             Parents, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Category;

      package API_Category is
         new Swagger.Servers.Operation (Handler => Category,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/category");

      --  Retrieve the product for the specified ASIN and domain.
      procedure Product
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Key : Swagger.UString;
         Domain : Integer;
         Asin : Swagger.Nullable_UString;
         Code : Swagger.Nullable_UString;
         Result : .Models.CategoryType_Vectors.Vector;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "key", Key);
         Swagger.Servers.Get_Query_Parameter (Req, "domain", Domain);
         Swagger.Servers.Get_Query_Parameter (Req, "asin", Asin);
         Swagger.Servers.Get_Query_Parameter (Req, "code", Code);
         Server.Product
            (Key,
             Domain,
             Asin,
             Code, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Product;

      package API_Product is
         new Swagger.Servers.Operation (Handler => Product,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/product");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Category.Definition);
         Swagger.Servers.Register (Server, API_Product.Definition);
      end Register;

      protected body Server is
         --  Returns Amazon category information from Keepa API.
         procedure Category
            (Key : in Swagger.UString;
             Domain : in Integer;
             Category : in Integer;
             Parents : in Integer;
             Result : out .Models.CategoryType_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Category
               (Key,
                Domain,
                Category,
                Parents,
                Result,
                Context);
         end Category;

         --  Retrieve the product for the specified ASIN and domain.
         procedure Product
            (Key : in Swagger.UString;
             Domain : in Integer;
             Asin : in Swagger.Nullable_UString;
             Code : in Swagger.Nullable_UString;
             Result : out .Models.CategoryType_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Product
               (Key,
                Domain,
                Asin,
                Code,
                Result,
                Context);
         end Product;

      end Server;

   end Shared_Instance;

end .Skeletons;
