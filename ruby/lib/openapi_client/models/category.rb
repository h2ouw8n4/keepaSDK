=begin
#Keepa API

#The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.

OpenAPI spec version: 1.0.0
Contact: info@keepa.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta2

=end

require 'date'

module OpenapiClient
  class Category
    # Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)
    attr_accessor :domain_id

    # The category node id used by Amazon. Represents the identifier of the category. Also part of the Product object’s categories and rootCategory fields. Always a positive Long value. Note - The id 9223372036854775807 (max signed long value) denotes a blank category with the name “?”. We use this in cases where a product is listed in no or non-existent categories.
    attr_accessor :cat_id

    # The name of the category.
    attr_accessor :name

    # List of all sub categories. null or [] (empty array) if the category has no sub categories.
    attr_accessor :children

    # The parent category’s Id. Always a positive Long value. If it is 0 the category is a root category and has no parent category.
    attr_accessor :parent

    # The highest (root category) sales rank we have observed of a product that is listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.
    attr_accessor :highest_rank

    # Number of products that are listed in this category. Note- Estimate, as the value is from the Keepa product database and not retrieved from Amazon.
    attr_accessor :product_count

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'domain_id' => :'domainId',
        :'cat_id' => :'catId',
        :'name' => :'name',
        :'children' => :'children',
        :'parent' => :'parent',
        :'highest_rank' => :'highestRank',
        :'product_count' => :'productCount'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'domain_id' => :'Integer',
        :'cat_id' => :'Integer',
        :'name' => :'String',
        :'children' => :'Array<Integer>',
        :'parent' => :'Integer',
        :'highest_rank' => :'Integer',
        :'product_count' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'domainId')
        self.domain_id = attributes[:'domainId']
      end

      if attributes.has_key?(:'catId')
        self.cat_id = attributes[:'catId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'children')
        if (value = attributes[:'children']).is_a?(Array)
          self.children = value
        end
      end

      if attributes.has_key?(:'parent')
        self.parent = attributes[:'parent']
      end

      if attributes.has_key?(:'highestRank')
        self.highest_rank = attributes[:'highestRank']
      end

      if attributes.has_key?(:'productCount')
        self.product_count = attributes[:'productCount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @domain_id.nil?
        invalid_properties.push('invalid value for "domain_id", domain_id cannot be nil.')
      end

      if @cat_id.nil?
        invalid_properties.push('invalid value for "cat_id", cat_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @children.nil?
        invalid_properties.push('invalid value for "children", children cannot be nil.')
      end

      if @parent.nil?
        invalid_properties.push('invalid value for "parent", parent cannot be nil.')
      end

      if @highest_rank.nil?
        invalid_properties.push('invalid value for "highest_rank", highest_rank cannot be nil.')
      end

      if @product_count.nil?
        invalid_properties.push('invalid value for "product_count", product_count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @domain_id.nil?
      domain_id_validator = EnumAttributeValidator.new('Integer', ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13'])
      return false unless domain_id_validator.valid?(@domain_id)
      return false if @cat_id.nil?
      return false if @name.nil?
      return false if @children.nil?
      return false if @parent.nil?
      return false if @highest_rank.nil?
      return false if @product_count.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] domain_id Object to be assigned
    def domain_id=(domain_id)
      validator = EnumAttributeValidator.new('Integer', ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13'])
      unless validator.valid?(domain_id)
        fail ArgumentError, 'invalid value for "domain_id", must be one of #{validator.allowable_values}.'
      end
      @domain_id = domain_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          domain_id == o.domain_id &&
          cat_id == o.cat_id &&
          name == o.name &&
          children == o.children &&
          parent == o.parent &&
          highest_rank == o.highest_rank &&
          product_count == o.product_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [domain_id, cat_id, name, children, parent, highest_rank, product_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
