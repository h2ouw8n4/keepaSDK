=begin
#Keepa API

#The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.

OpenAPI spec version: 1.0.0
Contact: info@keepa.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta2

=end

require 'uri'

module OpenapiClient
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve the product for the specified ASIN and domain.
    # Retrieves the product object for the specified ASIN and domain. If our last update is older than one hour it will be automatically refreshed before delivered to you to ensure you get near to real-time pricing data.  You can request products via either their ASIN (preferred) or via UPC and EAN codes. You can not use both parameters, asin and code, in the same request. Keepa can not track Amazon Fresh and eBooks.
    # @param key Your private API key.
    # @param domain Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :asin The ASIN of the product you want to request. For batch requests a comma separated list of ASINs (up to one hundred).
    # @option opts [String] :code The product code of the product you want to request. We currently allow UPC, EAN and ISBN-13 codes. For batch requests a comma separated list of codes (up to one hundred). Multiple ASINs can have the same product code, so requesting a product code can return multiple products.
    # @return [Array<Category>]
    def product(key, domain, opts = {})
      data, _status_code, _headers = product_with_http_info(key, domain, opts)
      data
    end

    # Retrieve the product for the specified ASIN and domain.
    # Retrieves the product object for the specified ASIN and domain. If our last update is older than one hour it will be automatically refreshed before delivered to you to ensure you get near to real-time pricing data.  You can request products via either their ASIN (preferred) or via UPC and EAN codes. You can not use both parameters, asin and code, in the same request. Keepa can not track Amazon Fresh and eBooks.
    # @param key Your private API key.
    # @param domain Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :asin The ASIN of the product you want to request. For batch requests a comma separated list of ASINs (up to one hundred).
    # @option opts [String] :code The product code of the product you want to request. We currently allow UPC, EAN and ISBN-13 codes. For batch requests a comma separated list of codes (up to one hundred). Multiple ASINs can have the same product code, so requesting a product code can return multiple products.
    # @return [Array<(Array<Category>, Fixnum, Hash)>] Array<Category> data, response status code and response headers
    def product_with_http_info(key, domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ProductApi.product"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling ProductApi.product"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13'].include?(domain)
        fail ArgumentError, "invalid value for 'domain', must be one of 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13"
      end
      # resource path
      local_var_path = '/product'

      # query parameters
      query_params = {}
      query_params[:'key'] = key
      query_params[:'domain'] = domain
      query_params[:'asin'] = opts[:'asin'] if !opts[:'asin'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Category>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
