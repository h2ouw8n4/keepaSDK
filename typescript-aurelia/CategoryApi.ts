/**
 * Keepa API
 * The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@keepa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Category,
} from './models';

/**
 * category - parameters interface
 */
export interface ICategoryParams {
  key: string;
  domain: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;
  category: number;
  parents: 0 | 1;
}

/**
 * CategoryApi - API class
 */
@autoinject()
export class CategoryApi extends Api {

  /**
   * Creates a new CategoryApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Returns Amazon category information from Keepa API.
   * Retrieve category objects using their node ids and (optional) their parent tree.
   * @param params.key Your private API key.
   * @param params.domain Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)
   * @param params.category The category node id of the category you want to request. For batch requests a comma separated list of ids (up to 10, the token cost stays the same). Alternatively you can specify the value 0, which will retrieve a list of all root categories.
   * @param params.parents Whether or not to include the category tree for each category. (1 &#x3D; include, 0 &#x3D; do not include.)
   */
  async category(params: ICategoryParams): Promise<Array<Category>> {
    // Verify required parameters are set
    this.ensureParamIsSet('category', params, 'key');
    this.ensureParamIsSet('category', params, 'domain');
    this.ensureParamIsSet('category', params, 'category');
    this.ensureParamIsSet('category', params, 'parents');

    // Create URL to call
    const url = `${this.basePath}/category`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'key': params['key'],
        'domain': params['domain'],
        'category': params['category'],
        'parents': params['parents'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

