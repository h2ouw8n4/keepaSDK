<?php

/**
 * CategoryController
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Keepa API
 *
 * The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@keepa.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\CategoryApiInterface;
use OpenAPI\Server\Model\Category;

/**
 * CategoryController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class CategoryController extends Controller
{

    /**
     * Operation category
     *
     * Returns Amazon category information from Keepa API.
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function categoryAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $key = $request->query->get('key');
        $domain = $request->query->get('domain');
        $category = $request->query->get('category');
        $parents = $request->query->get('parents');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        $key = $this->deserialize($key, 'string', 'string');
        $domain = $this->deserialize($domain, 'int', 'string');
        $category = $this->deserialize($category, 'int', 'string');
        $parents = $this->deserialize($parents, 'int', 'string');

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($key, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Choice([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 ]);
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($domain, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($category, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Choice([ 0, 1 ]);
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($parents, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->category($key, $domain, $category, $parents, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'search results matching criteria';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'search results matching criteria';
                    break;
                case 400:
                    $message = 'bad input parameter';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return CategoryApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('category');
    }
}
