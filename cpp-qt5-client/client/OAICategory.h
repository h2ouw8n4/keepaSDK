/**
 * Keepa API
 * The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@keepa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICategory.h
 *
 * 
 */

#ifndef OAICategory_H
#define OAICategory_H

#include <QJsonObject>


#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAICategory: public OAIObject {
public:
    OAICategory();
    OAICategory(QString json);
    ~OAICategory() override;

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDomainId() const;
    void setDomainId(const qint32 &domain_id);

    qint32 getCatId() const;
    void setCatId(const qint32 &cat_id);

    QString getName() const;
    void setName(const QString &name);

    QList<qint32> getChildren() const;
    void setChildren(const QList<qint32> &children);

    qint32 getParent() const;
    void setParent(const qint32 &parent);

    qint32 getHighestRank() const;
    void setHighestRank(const qint32 &highest_rank);

    qint32 getProductCount() const;
    void setProductCount(const qint32 &product_count);

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void init();
    qint32 domain_id;
    bool m_domain_id_isSet;
    bool m_domain_id_isValid;
    qint32 cat_id;
    bool m_cat_id_isSet;
    bool m_cat_id_isValid;
    QString name;
    bool m_name_isSet;
    bool m_name_isValid;
    QList<qint32> children;
    bool m_children_isSet;
    bool m_children_isValid;
    qint32 parent;
    bool m_parent_isSet;
    bool m_parent_isValid;
    qint32 highest_rank;
    bool m_highest_rank_isSet;
    bool m_highest_rank_isValid;
    qint32 product_count;
    bool m_product_count_isSet;
    bool m_product_count_isValid;
};

}

#endif // OAICategory_H
