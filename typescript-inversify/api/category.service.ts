/**
 * Keepa API
 * The Keepa API offers numerous endpoints.  Every request requires your API access key as a parameter. You can find and change your key in the keepa portal. All requests must be issued as a HTTPS GET and accept gzip encoding. If possible, use a Keep-Alive connection.  Multiple requests can be made in parallel to increase throughput.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@keepa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { Category } from '../model/category';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class CategoryService {
    private basePath: string = 'https://virtserver.swaggerhub.com/magicCashew/keepa/1.0.0';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Returns Amazon category information from Keepa API.
     * Retrieve category objects using their node ids and (optional) their parent tree.
     * @param key Your private API key.
     * @param domain Integer value for the Amazon locale you want to access. (1-com, 2-co.uk, 3-de, 4-fr, 5-co.jp, 6-ca, 7-cn, 8-it, 9-es, 10-in, 11-com.mx, 12-com.br, 13-com.au)
     * @param category The category node id of the category you want to request. For batch requests a comma separated list of ids (up to 10, the token cost stays the same). Alternatively you can specify the value 0, which will retrieve a list of all root categories.
     * @param parents Whether or not to include the category tree for each category. (1 &#x3D; include, 0 &#x3D; do not include.)
     
     */
    public category(key: string, domain: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13, category: number, parents: 0 | 1, observe?: 'body', headers?: Headers): Observable<Array<Category>>;
    public category(key: string, domain: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13, category: number, parents: 0 | 1, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Category>>>;
    public category(key: string, domain: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13, category: number, parents: 0 | 1, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!key){
            throw new Error('Required parameter key was null or undefined when calling category.');
        }

        if (!domain){
            throw new Error('Required parameter domain was null or undefined when calling category.');
        }

        if (!category){
            throw new Error('Required parameter category was null or undefined when calling category.');
        }

        if (!parents){
            throw new Error('Required parameter parents was null or undefined when calling category.');
        }

        let queryParameters: string[] = [];
        if (key !== undefined) {
            queryParameters.push("key="+encodeURIComponent(String(key)));
        }
        if (domain !== undefined) {
            queryParameters.push("domain="+encodeURIComponent(String(domain)));
        }
        if (category !== undefined) {
            queryParameters.push("category="+encodeURIComponent(String(category)));
        }
        if (parents !== undefined) {
            queryParameters.push("parents="+encodeURIComponent(String(parents)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Category>>> = this.httpClient.get(`${this.basePath}/category?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Category>>(httpResponse.response));
        }
        return response;
    }

}
